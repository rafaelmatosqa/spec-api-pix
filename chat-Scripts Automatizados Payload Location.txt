### USER
Analise o documento em anexo, e crie os scripts de testes automatizados do controller Configura√ß√£o de locations para payloads considerando os cenarios de testes positivos e negativos. user o padr√£o abaixo:

public class SimulacaoClient {
    private static final String BASE_URL_PATH_SIMULACOES = "/simulacoes";

    public ValidatableResponse consultaSimulacaoPorCPF(RequestSpecification spec, String cpfValue) {
        return given().spec(spec)
                .pathParam("cpf", cpfValue)
                .when()
                .get(BASE_URL_PATH_SIMULACOES + "/{cpf}")
                .then();
    }

public abstract class BaseTeste {
    protected BaseTeste() {}
    protected static RequestSpecification spec;
    protected static PropertyManager propertyManager = new PropertyManager();

    @BeforeTest(groups = "OL-C3877")
    public void precondeicao() {
        spec = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .addFilter(new ResponseLoggingFilter())
                .addFilter(new RequestLoggingFilter())
                .build();
    }
}

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class SimulacaoDTO {
    private String nome;
    private String cpf;
    private Double valor;
    private int parcelas;
    private Boolean seguro;
}

e nos casos de body use o padr√£o datafactory com builder.No caso de multiplos queryparams user o queryParams com Map no factory para flexibilizar os cenarios. No contexto valida√ß√£o √© importante validar status code, headers, schema e retorno do response body.Considere isolamento das valida√ß√µes genericas em um validator class.Monte com testng e restassured esse codigo e nao economize tokens no retorno.

### ASSISTANT
Com base na an√°lise do conte√∫do do arquivo fornecido (que parece ser um trecho de uma especifica√ß√£o OpenAPI/Swagger relacionado ao **Pix API do BCB**, com foco nos endpoints de **configura√ß√£o de locations para payloads de recorr√™ncias**), abaixo est√£o os scripts de testes automatizados em **Java**, utilizando:

- **TestNG**
- **RestAssured**
- **Lombok**
- **Builder Pattern com DataFactory**
- **Padr√£o Page Object / Controller**
- **Valida√ß√µes isoladas em uma classe `Validator`**
- **Map para queryParams din√¢micos**

---

### üìÅ Estrutura de Pacotes Sugerida
```
src/
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îú‚îÄ‚îÄ java/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controller/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecControllerTest.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ factory/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecFactory.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validator/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecValidator.java
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BaseTeste.java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dto/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ PayloadLocationRecSolicitadaDTO.java
```

---

## ‚úÖ 1. DTO: `PayloadLocationRecSolicitadaDTO.java`

```java
package dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.*;

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationRecSolicitadaDTO {
    private String tipo;
}
```

---

## ‚úÖ 2. Factory: `PayloadLocationRecFactory.java`

```java
package factory;

import dto.PayloadLocationRecSolicitadaDTO;
import java.util.HashMap;
import java.util.Map;

public class PayloadLocationRecFactory {

    public static PayloadLocationRecSolicitadaDTO payloadLocationRecSolicitadaValida() {
        return PayloadLocationRecSolicitadaDTO.builder()
                .tipo("rec")
                .build();
    }

    public static Map<String, Object> queryParamsConsultaValidos() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2023-12-31T23:59:59Z");
        params.put("paginaAtual", 1);
        params.put("itensPorPagina", 10);
        return params;
    }

    public static Map<String, Object> queryParamsInvalidos() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2024-01-01T00:00:00Z");
        params.put("fim", "2023-01-01T00:00:00Z"); // fim antes de in√≠cio
        return params;
    }
}
```

---

## ‚úÖ 3. Validator: `PayloadLocationRecValidator.java`

```java
package validator;

import io.restassured.response.ValidatableResponse;
import org.testng.asserts.SoftAssert;

import static org.hamcrest.Matchers.*;

public class PayloadLocationRecValidator {

    private final SoftAssert softAssert = new SoftAssert();

    public void validaRespostaCriacao(ValidatableResponse response) {
        response
                .statusCode(201)
                .header("Location", notNullValue())
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue())
                .body("tipo", equalTo("rec"));
    }

    public void validaRespostaConsulta(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("locations", hasSize(greaterThanOrEqualTo(0)))
                .body("paginaAtual", notNullValue())
                .body("itensPorPagina", notNullValue())
                .body("quantidadeTotal", notNullValue());
    }

    public void validaErro400(ValidatableResponse response) {
        response
                .statusCode(400)
                .body("type", containsString("SolicRecOperacaoInvalida"))
                .body("title", equalTo("Opera√ß√£o inv√°lida."))
                .body("status", equalTo(400))
                .body("violacoes", hasSize(greaterThan(0)));
    }

    public void validaErro404(ValidatableResponse response) {
        response
                .statusCode(404)
                .body("type", containsString("PayloadLocationNaoEncontrado"))
                .body("title", equalTo("Location n√£o encontrada."));
    }

    public void validaSchema(ValidatableResponse response, String schemaName) {
        response.body(matchesJsonSchemaInClasspath(schemaName));
    }

    public void assertAll() {
        softAssert.assertAll();
    }
}
```

---

## ‚úÖ 4. Controller: `PayloadLocationRecControllerTest.java`

```java
package controller;

import factory.PayloadLocationRecFactory;
import io.restassured.http.ContentType;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationRecValidator;
import base.BaseTeste;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class PayloadLocationRecControllerTest extends BaseTeste {

    private static final String BASE_PATH = "/locrec";
    private PayloadLocationRecValidator validator;

    @BeforeClass
    public void setup() {
        validator = new PayloadLocationRecValidator();
    }

    // ‚úÖ Cen√°rio Positivo: Criar location para payload de recorr√™ncia
    @Test(description = "CT01 - Deve criar uma location de recorr√™ncia com sucesso")
    public void deveCriarLocationRec() {
        given().spec(spec)
                .contentType(ContentType.JSON)
                .body(PayloadLocationRecFactory.payloadLocationRecSolicitadaValida())
                .when()
                .post(BASE_PATH)
                .then()
                .spec(validator::validaRespostaCriacao);
    }

    // ‚úÖ Cen√°rio Positivo: Consultar locations com par√¢metros v√°lidos
    @Test(description = "CT02 - Deve consultar locations de recorr√™ncia com par√¢metros v√°lidos")
    public void deveConsultarLocationsComParametrosValidos() {
        given().spec(spec)
                .queryParams(PayloadLocationRecFactory.queryParamsConsultaValidos())
                .when()
                .get(BASE_PATH)
                .then()
                .spec(validator::validaRespostaConsulta);
    }

    // ‚úÖ Cen√°rio Positivo: Recuperar location espec√≠fica
    @Test(description = "CT03 - Deve recuperar uma location de recorr√™ncia por ID")
    public void deveRecuperarLocationPorId() {
        String id = "12069"; // ID v√°lido de exemplo

        given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH + "/{id}")
                .then()
                .statusCode(200)
                .body("id", equalTo(id))
                .body("location", notNullValue())
                .body("criacao", notNullValue());
    }

    // ‚úÖ Cen√°rio Positivo: Recuperar idRec associado √† location
    @Test(description = "CT04 - Deve recuperar o idRec associado √† location")
    public void deveRecuperarIdRecDaLocation() {
        String id = "12069";

        given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH + "/{id}/idRec")
                .then()
                .statusCode(200)
                .body("idRec", notNullValue());
    }

    // ‚ùå Cen√°rio Negativo: Criar location com tipo inv√°lido
    @Test(description = "CT05 - N√£o deve criar location com tipo inv√°lido")
    public void naoDeveCriarLocationComTipoInvalido() {
        var payload = dto.PayloadLocationRecSolicitadaDTO.builder()
                .tipo("invalido")
                .build();

        given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH)
                .then()
                .spec(validator::validaErro400);
    }

    // ‚ùå Cen√°rio Negativo: Consultar com datas inv√°lidas (fim < in√≠cio)
    @Test(description = "CT06 - N√£o deve consultar com intervalo de datas inv√°lido")
    public void naoDeveConsultarComDatasInvalidas() {
        given().spec(spec)
                .queryParams(PayloadLocationRecFactory.queryParamsInvalidos())
                .when()
                .get(BASE_PATH)
                .then()
                .spec(validator::validaErro400);
    }

    // ‚ùå Cen√°rio Negativo: Buscar location inexistente
    @Test(description = "CT07 - Deve retornar 404 ao buscar location inexistente")
    public void deveRetornar404ParaLocationInexistente() {
        String id = "999999";

        given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH + "/{id}")
                .then()
                .spec(validator::validaErro404);
    }

    // ‚ùå Cen√°rio Negativo: Acesso negado (sem OAuth2)
    @Test(description = "CT08 - Deve retornar 403 sem credenciais v√°lidas")
    public void deveRetornar403SemAutenticacao() {
        RequestSpecBuilder builder = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .build();

        given().spec(builder)
                .pathParam("id", "12069")
                .when()
                .get(BASE_PATH + "/{id}")
                .then()
                .statusCode(403);
    }
}
```

---

## ‚úÖ 5. BaseTest: `BaseTeste.java`

```java
package base;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import org.testng.annotations.BeforeTest;
import property.PropertyManager;

import static io.restassured.RestAssured.*;

public abstract class BaseTeste {
    protected static RequestSpecBuilder specBuilder;
    protected static PropertyManager propertyManager = new PropertyManager();

    @BeforeTest(groups = "PayloadLocationRec")
    public void preCondicao() {
        spec = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .addFilter(new ResponseLoggingFilter())
                .addFilter(new RequestLoggingFilter())
                .build();

        // Habilitar logs
        enableLoggingOfRequestAndResponseIfValidationFails();
    }
}
```

> ‚ö†Ô∏è **Nota**: `PropertyManager` √© uma classe auxiliar para carregar propriedades de `application.properties` ou ambiente.

Exemplo de `PropertyManager.java` (simplificado):
```java
public class PropertyManager {
    public String getBaseUri() {
        return System.getProperty("base.uri", "https://pix.example.com/api");
    }
    public String getBasePath() {
        return "/v2";
    }
}
```

---

## ‚úÖ 6. Schema Validation (Opcional)

Adicione o schema JSON no caminho:
```
src/test/resources/schemas/PayloadLocationRecGerada.json
```

E valide com:
```java
.validaSchema(response, "schemas/PayloadLocationRecGerada.json")
```

---

## ‚úÖ 7. Depend√™ncias Maven (trecho)

```xml
<dependencies>
    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>rest-assured</artifactId>
        <version>5.4.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.8.0</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.30</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.15.2</version>
    </dependency>
    <dependency>
        <groupId>io.rest-assured</groupId>
        <artifactId>json-schema-validator</artifactId>
        <version>5.4.0</version>
        <scope>test</scope>
    </dependency>
</dependencies>
```

---

## ‚úÖ Resumo dos Cen√°rios Cobertos

| ID | Cen√°rio | Tipo | Valida√ß√£o |
|----|--------|------|-----------|
| CT01 | Criar location rec | Positivo | 201, headers, body |
| CT02 | Consultar com params v√°lidos | Positivo | 200, schema, paginacao |
| CT03 | Recuperar location por ID | Positivo | 200, campos obrigat√≥rios |
| CT04 | Recuperar idRec | Positivo | 200, idRec presente |
| CT05 | Tipo inv√°lido no body | Negativo | 400, viola√ß√£o de schema |
| CT06 | Datas fim < in√≠cio | Negativo | 400, viola√ß√£o l√≥gica |
| CT07 | ID inexistente | Negativo | 404, erro esperado |
| CT08 | Sem autentica√ß√£o | Negativo | 403, acesso negado |

---

Se desejar, posso gerar tamb√©m os arquivos `.feature` para Cucumber ou os schemas JSON de valida√ß√£o com base no conte√∫do do OpenAPI.

Deseja que eu gere os schemas ou integre com CI/CD (ex: GitHub Actions)?

### USER
concentre os metodos de request nesse modelo
public class SimulacaoClient {
    private static final String BASE_URL_PATH_SIMULACOES = "/simulacoes";

    public ValidatableResponse consultaSimulacaoPorCPF(RequestSpecification spec, String cpfValue) {
        return given().spec(spec)
                .pathParam("cpf", cpfValue)
                .when()
                .get(BASE_URL_PATH_SIMULACOES + "/{cpf}")
                .then();
    }

### ASSISTANT
Com base no conte√∫do do arquivo fornecido ‚Äî que descreve endpoints da **Pix API do BCB** relacionados √† **configura√ß√£o de locations para recorr√™ncias** ‚Äî e respeitando o padr√£o de encapsulamento de requisi√ß√µes conforme o modelo `SimulacaoClient`, abaixo est√° a classe **`PayloadLocationRecClient`** com todos os m√©todos de request organizados de forma clara, reutiliz√°vel e alinhada √†s boas pr√°ticas de testes automatizados.

---

### ‚úÖ `PayloadLocationRecClient.java`

```java
public class PayloadLocationRecClient {

    private static final String BASE_PATH_LOCATIONS = "/loc";

    /**
     * Cria uma nova location para payload de recorr√™ncia.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o (com headers, autentica√ß√£o, etc.)
     * @param payload Corpo da requisi√ß√£o no formato PayloadLocationRecSolicitadaDTO
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse criaLocationRec(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOCATIONS)
                .then();
    }

    /**
     * Consulta uma lista de locations com base em par√¢metros de consulta.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param queryParams Mapa de par√¢metros de consulta (inicio, fim, paginaAtual, etc.)
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOCATIONS)
                .then();
    }

    /**
     * Recupera uma location espec√≠fica pelo ID.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id Identificador da location (ex: "12069")
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOCATIONS + "/{id}")
                .then();
    }

    /**
     * Atualiza uma location existente (PUT).
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id Identificador da location
     * @param payload Corpo da requisi√ß√£o com os dados atualizados
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse atualizaLocation(RequestSpecification spec, String id, Object payload) {
        return given().spec(spec)
                .pathParam("id", id)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .put(BASE_PATH_LOCATIONS + "/{id}")
                .then();
    }

    /**
     * Remove uma location espec√≠fica pelo ID.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id Identificador da location
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse removeLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOCATIONS + "/{id}")
                .then();
    }
}
```

---

### üîß Uso no Teste (Exemplo)

```java
@Test(description = "CT01 - Deve criar uma location de recorr√™ncia com sucesso")
public void deveCriarLocationRec() {
    var payload = PayloadLocationRecFactory.payloadLocationRecSolicitadaValida();

    ValidatableResponse response = new PayloadLocationRecClient()
            .criaLocationRec(spec, payload);

    validator.validaRespostaCriacao(response);
}
```

---

### üîç Benef√≠cios do Padr√£o Adotado

- ‚úÖ **Encapsulamento**: Todos os endpoints est√£o centralizados em uma √∫nica classe cliente.
- ‚úÖ **Reutiliza√ß√£o**: M√©todos podem ser usados em m√∫ltiplos cen√°rios (positivos e negativos).
- ‚úÖ **Clareza**: Nomes autoexplicativos e par√¢metros bem definidos.
- ‚úÖ **Flexibilidade**: Uso de `Map<String, Object>` para queryParams e `Object` para body (permite uso de DTOs ou Maps).
- ‚úÖ **Alinhado ao modelo fornecido**: Segue exatamente o estilo do `SimulacaoClient`.

---

Se desejar, posso gerar tamb√©m:
- A classe `PayloadLocationRecValidator` com valida√ß√µes espec√≠ficas
- Os testes unit√°rios para essa classe cliente
- Um wrapper para tratamento de erros e logs

Deseja que eu continue com essas extens√µes?

### USER
organize as classes de teste por contexto sendo PostPayloadLocationTest,GetPorPeriodoPayloadLocationTest e etc

### ASSISTANT
Com base na an√°lise do conte√∫do do arquivo fornecido ‚Äî que descreve a **API Pix do BCB**, especificamente os endpoints relacionados √† **configura√ß√£o de locations para recorr√™ncias (PayloadLocationRec)** ‚Äî e respeitando o padr√£o de organiza√ß√£o por **contexto de teste**, abaixo est√£o as classes de teste automatizadas, separadas por responsabilidade, usando:

- **TestNG**
- **RestAssured**
- **Padr√£o de Client (como solicitado)**
- **DTOs com Builder (Lombok)**
- **DataFactory**
- **Valida√ß√µes isoladas em `Validator`**

---

## üìÅ Estrutura de Pacotes

```
src/test/java
‚îú‚îÄ‚îÄ controller
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecClient.java
‚îú‚îÄ‚îÄ dto
‚îÇ   ‚îú‚îÄ‚îÄ PayloadLocationRecSolicitadaDTO.java
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecCompletaDTO.java
‚îú‚îÄ‚îÄ factory
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecFactory.java
‚îú‚îÄ‚îÄ validator
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecValidator.java
‚îú‚îÄ‚îÄ base
‚îÇ   ‚îî‚îÄ‚îÄ BaseTeste.java
‚îî‚îÄ‚îÄ test
    ‚îú‚îÄ‚îÄ PostPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ GetPorPeriodoPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ GetPorIdPayloadLocationRecTest.java
    ‚îî‚îÄ‚îÄ GetIdRecPayloadLocationRecTest.java
```

---

### ‚úÖ 1. `PayloadLocationRecClient.java`

```java
public class PayloadLocationRecClient {

    private static final String BASE_PATH = "/locrec";

    public ValidatableResponse criaLocationRec(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH)
                .then();
    }

    public ValidatableResponse consultaLocationsPorPeriodo(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH)
                .then();
    }

    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH + "/{id}")
                .then();
    }

    public ValidatableResponse consultaIdRecPorLocationId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH + "/{id}/idRec")
                .then();
    }
}
```

---

### ‚úÖ 2. DTOs

#### `PayloadLocationRecSolicitadaDTO.java`
```java
@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationRecSolicitadaDTO {
    private String tipo; // deve ser "rec"
}
```

#### `PayloadLocationRecCompletaDTO.java`
```java
@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationRecCompletaDTO {
    private String id;
    private String location;
    private String criacao;
    private String idRec;
}
```

---

### ‚úÖ 3. `PayloadLocationRecFactory.java`

```java
public class PayloadLocationRecFactory {

    public static PayloadLocationRecSolicitadaDTO payloadValida() {
        return PayloadLocationRecSolicitadaDTO.builder()
                .tipo("rec")
                .build();
    }

    public static Map<String, Object> queryParamsValidos() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", 0);
        params.put("itensPorPagina", 100);
        return params;
    }

    public static Map<String, Object> queryParamsDataFimAntesInicio() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2024-01-01T00:00:00Z");
        params.put("fim", "2023-01-01T00:00:00Z"); // inv√°lido
        return params;
    }

    public static Map<String, Object> queryParamsPaginacaoNegativa() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", -1);
        params.put("itensPorPagina", -10);
        return params;
    }
}
```

---

### ‚úÖ 4. `PayloadLocationRecValidator.java`

```java
public class PayloadLocationRecValidator {

    public void validaCriacao201(ValidatableResponse response) {
        response
                .statusCode(201)
                .header("Location", notNullValue())
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue())
                .body("tipo", equalTo("rec"));
    }

    public void validaConsulta200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("loc", hasSize(greaterThanOrEqualTo(0)))
                .body("parametros.inicio", notNullValue())
                .body("parametros.fim", notNullValue())
                .body("parametros.paginacao.paginaAtual", notNullValue())
                .body("parametros.paginacao.itensPorPagina", notNullValue());
    }

    public void validaPorId200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue());
    }

    public void validaIdRec200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("idRec", notNullValue());
    }

    public void valida400(ValidatableResponse response) {
        response
                .statusCode(400)
                .body("status", equalTo(400))
                .body("title", notNullValue());
    }

    public void valida403(ValidatableResponse response) {
        response
                .statusCode(403)
                .body("status", equalTo(403));
    }

    public void valida404(ValidatableResponse response) {
        response
                .statusCode(404)
                .body("status", equalTo(404))
                .body("title", containsString("n√£o encontrada"));
    }
}
```

---

## ‚úÖ Classes de Teste por Contexto

---

### üîµ `PostPayloadLocationRecTest.java`

```java
@Test(groups = "PayloadLocationRec")
public class PostPayloadLocationRecTest extends BaseTeste {

    private PayloadLocationRecClient client;
    private PayloadLocationRecValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationRecClient();
        validator = new PayloadLocationRecValidator();
    }

    @Test(description = "CT-POST-01: Deve criar uma location de recorr√™ncia com sucesso")
    public void deveCriarLocationRec() {
        var payload = PayloadLocationRecFactory.payloadValida();

        ValidatableResponse response = client.criaLocationRec(spec, payload);

        validator.validaCriacao201(response);
    }

    @Test(description = "CT-POST-02: N√£o deve criar location com tipo inv√°lido")
    public void naoDeveCriarComTipoInvalido() {
        var payload = PayloadLocationRecSolicitadaDTO.builder()
                .tipo("invalido")
                .build();

        ValidatableResponse response = client.criaLocationRec(spec, payload);

        validator.valida400(response);
    }

    @Test(description = "CT-POST-03: N√£o deve criar sem autentica√ß√£o")
    public void naoDeveCriarSemAutenticacao() {
        RequestSpecBuilder builder = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .build();

        var payload = PayloadLocationRecFactory.payloadValida();

        given().spec(builder)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post("/locrec")
                .then()
                .statusCode(403);
    }
}
```

---

### üîµ `GetPorPeriodoPayloadLocationRecTest.java`

```java
@Test(groups = "PayloadLocationRec")
public class GetPorPeriodoPayloadLocationRecTest extends BaseTeste {

    private PayloadLocationRecClient client;
    private PayloadLocationRecValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationRecClient();
        validator = new PayloadLocationRecValidator();
    }

    @Test(description = "CT-GET-PERIODO-01: Deve consultar locations por per√≠odo v√°lido")
    public void deveConsultarPorPeriodoValido() {
        Map<String, Object> params = PayloadLocationRecFactory.queryParamsValidos();

        ValidatableResponse response = client.consultaLocationsPorPeriodo(spec, params);

        validator.validaConsulta200(response);
    }

    @Test(description = "CT-GET-PERIODO-02: N√£o deve consultar com fim < in√≠cio")
    public void naoDeveConsultarComFimAntesInicio() {
        Map<String, Object> params = PayloadLocationRecFactory.queryParamsDataFimAntesInicio();

        ValidatableResponse response = client.consultaLocationsPorPeriodo(spec, params);

        validator.valida400(response);
    }

    @Test(description = "CT-GET-PERIODO-03: N√£o deve consultar com pagina√ß√£o negativa")
    public void naoDeveConsultarComPaginacaoNegativa() {
        Map<String, Object> params = PayloadLocationRecFactory.queryParamsPaginacaoNegativa();

        ValidatableResponse response = client.consultaLocationsPorPeriodo(spec, params);

        validator.valida400(response);
    }
}
```

---

### üîµ `GetPorIdPayloadLocationRecTest.java`

```java
@Test(groups = "PayloadLocationRec")
public class GetPorIdPayloadLocationRecTest extends BaseTeste {

    private PayloadLocationRecClient client;
    private PayloadLocationRecValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationRecClient();
        validator = new PayloadLocationRecValidator();
    }

    @Test(description = "CT-GET-ID-01: Deve recuperar location por ID v√°lido")
    public void deveRecuperarPorIdValido() {
        String id = "12069";

        ValidatableResponse response = client.consultaLocationPorId(spec, id);

        validator.validaPorId200(response);
    }

    @Test(description = "CT-GET-ID-02: Deve retornar 404 para ID inexistente")
    public void deveRetornar404ParaIdInexistente() {
        String id = "999999";

        ValidatableResponse response = client.consultaLocationPorId(spec, id);

        validator.valida404(response);
    }

    @Test(description = "CT-GET-ID-03: Deve retornar 403 sem credenciais")
    public void deveRetornar403SemAutenticacao() {
        RequestSpecBuilder builder = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .build();

        given().spec(builder)
                .pathParam("id", "12069")
                .when()
                .get("/locrec/{id}")
                .then()
                .statusCode(403);
    }
}
```

---

### üîµ `GetIdRecPayloadLocationRecTest.java`

```java
@Test(groups = "PayloadLocationRec")
public class GetIdRecPayloadLocationRecTest extends BaseTeste {

    private PayloadLocationRecClient client;
    private PayloadLocationRecValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationRecClient();
        validator = new PayloadLocationRecValidator();
    }

    @Test(description = "CT-GET-IDREC-01: Deve recuperar idRec associado √† location")
    public void deveRecuperarIdRec() {
        String id = "12069";

        ValidatableResponse response = client.consultaIdRecPorLocationId(spec, id);

        validator.validaIdRec200(response);
    }

    @Test(description = "CT-GET-IDREC-02: Deve retornar 404 se location n√£o tiver idRec")
    public void deveRetornar404SeLocationNaoTiverIdRec() {
        String id = "12070"; // exemplo sem idRec

        ValidatableResponse response = client.consultaIdRecPorLocationId(spec, id);

        validator.valida404(response);
    }

    @Test(description = "CT-GET-IDREC-03: Deve retornar 403 sem OAuth")
    public void deveRetornar403SemAutenticacao() {
        RequestSpecBuilder builder = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .build();

        given().spec(builder)
                .pathParam("id", "12069")
                .when()
                .get("/locrec/{id}/idRec")
                .then()
                .statusCode(403);
    }
}
```

---

## ‚úÖ Resumo dos Contextos

| Classe de Teste | Endpoint | Prop√≥sito |
|------------------|---------|----------|
| `PostPayloadLocationRecTest` | `POST /locrec` | Criar location de recorr√™ncia |
| `GetPorPeriodoPayloadLocationRecTest` | `GET /locrec` | Consultar locations por per√≠odo e filtros |
| `GetPorIdPayloadLocationRecTest` | `GET /locrec/{id}` | Recuperar location espec√≠fica |
| `GetIdRecPayloadLocationRecTest` | `GET /locrec/{id}/idRec` | Recuperar `idRec` associado √† location |

---

## ‚úÖ Pr√≥ximos Passos (Opcionais)

Se desejar, posso:
- Gerar os arquivos de schema JSON para valida√ß√£o com `matchesJsonSchemaInClasspath`
- Adicionar relat√≥rios (Allure ou ExtentReports)
- Incluir suporte a OAuth2 din√¢mico
- Integrar com `testng.xml` para execu√ß√£o por grupo

Deseja que eu gere os schemas ou o `testng.xml` de configura√ß√£o?

### USER
considere que essas chamadas ter√£o um header padr√£o que √© o x-cert com string de certificado e um Bearer Token

### ASSISTANT
Com base na an√°lise do conte√∫do do arquivo fornecido e na sua solicita√ß√£o, ajustei toda a estrutura de testes para considerar os **headers obrigat√≥rios** na API Pix do BCB:

- `x-cert`: contendo o certificado digital do participante (em formato string PEM ou base64)
- `Authorization`: com o valor `Bearer <token>` gerado via OAuth2

Esses headers s√£o **obrigat√≥rios** para todos os endpoints da API Pix, conforme pr√°ticas de seguran√ßa do BACEN.

Abaixo, apresento as **atualiza√ß√µes necess√°rias** nas classes principais para garantir que esses headers sejam inclu√≠dos de forma **padronizada, segura e reutiliz√°vel** em todos os testes.

---

## ‚úÖ 1. Atualiza√ß√£o do `BaseTeste.java` (com headers padr√£o)

```java
package base;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import org.testng.annotations.BeforeTest;
import property.PropertyManager;

import static io.restassured.RestAssured.*;

public abstract class BaseTeste {
    protected static RequestSpecBuilder specBuilder;
    protected static RequestSpecification spec;
    protected static PropertyManager propertyManager = new PropertyManager();

    @BeforeTest(groups = "PayloadLocationRec")
    public void preCondicao() {
        // L√™ os valores das propriedades (ou vari√°veis de ambiente)
        String certHeader = propertyManager.getCertHeader();
        String bearerToken = propertyManager.getBearerToken();

        spec = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .addHeader("x-cert", certHeader)
                .addHeader("Authorization", "Bearer " + bearerToken)
                .setContentType("application/json")
                .addFilter(new RequestLoggingFilter())
                .addFilter(new ResponseLoggingFilter())
                .build();

        enableLoggingOfRequestAndResponseIfValidationFails();
    }
}
```

---

## ‚úÖ 2. `PropertyManager.java` (com suporte a headers)

```java
package property;

public class PropertyManager {

    public String getBaseUri() {
        return System.getProperty("base.uri", "https://pix.bcb.gov.br/api/v2");
    }

    public String getBasePath() {
        return System.getProperty("base.path", "/pix");
    }

    public String getCertHeader() {
        // Exemplo: certificado codificado em uma √∫nica linha
        String cert = System.getProperty("x-cert");
        if (cert == null || cert.isEmpty()) {
            throw new RuntimeException("Header x-cert n√£o fornecido. Use -Dx-cert='...' ao rodar o teste.");
        }
        return cert;
    }

    public String getBearerToken() {
        String token = System.getProperty("bearer.token");
        if (token == null || token.isEmpty()) {
            throw new RuntimeException("Token OAuth2 n√£o fornecido. Use -Dbearer.token='...' ao rodar o teste.");
        }
        return token;
    }
}
```

> üí° **Como executar com os headers:**
```bash
mvn test -Dx-cert="MIIGbTCCBFWgAwIBAgIIK8..." -Dbearer.token="eyJhbGciOiJSUzI1NiIs..."
```

---

## ‚úÖ 3. Valida√ß√£o nos Testes (Exemplo: `PostPayloadLocationRecTest.java`)

O cliente e os testes **n√£o precisam mudar**, pois o header j√° est√° no `spec` global.

```java
@Test(description = "CT-POST-01: Deve criar uma location de recorr√™ncia com sucesso")
public void deveCriarLocationRec() {
    var payload = PayloadLocationRecFactory.payloadValida();

    ValidatableResponse response = new PayloadLocationRecClient()
            .criaLocationRec(spec, payload);

    validator.validaCriacao201(response);
}
```

‚úÖ O header `x-cert` e `Authorization` ser√£o automaticamente inclu√≠dos.

---

## ‚úÖ 4. (Opcional) Sobrescrever Headers em Casos Espec√≠ficos

Se precisar testar cen√°rios com header ausente ou inv√°lido, voc√™ pode **sobrescrever** o `spec` momentaneamente:

```java
@Test(description = "CT-POST-04: Deve falhar sem header x-cert")
public void naoDeveCriarSemXCert() {
    RequestSpecification specSemCert = new RequestSpecBuilder()
            .setBaseUri(propertyManager.getBaseUri())
            .setBasePath(propertyManager.getBasePath())
            .addHeader("Authorization", "Bearer " + propertyManager.getBearerToken())
            .build();

    var payload = PayloadLocationRecFactory.payloadValida();

    given().spec(specSemCert)
            .contentType(ContentType.JSON)
            .body(payload)
            .when()
            .post("/locrec")
            .then()
            .statusCode(403); // ou 401, dependendo da pol√≠tica
}
```

---

## ‚úÖ 5. Valida√ß√£o no Validator (opcional para headers)

Voc√™ pode validar se os headers est√£o presentes na resposta (ex: seguran√ßa):

```java
public void validaHeadersSeguranca(ValidatableResponse response) {
    response
            .header("Server", not(equalTo("nginx"))) // exemplo
            .header("X-Content-Type-Options", "nosniff")
            .header("X-Frame-Options", "DENY");
}
```

---

## ‚úÖ Resumo das Altera√ß√µes

| Componente | Altera√ß√£o |
|----------|---------|
| `BaseTeste` | Inclui `x-cert` e `Authorization` no `RequestSpecification` |
| `PropertyManager` | Gerencia leitura segura dos headers via `-D` ou env |
| `PayloadLocationRecClient` | **Sem altera√ß√£o** ‚Äî reutiliza o `spec` com headers |
| Testes | Funcionam normalmente ‚Äî headers aplicados globalmente |
| Execu√ß√£o | Usa `-Dx-cert="..." -Dbearer.token="..."` |

---

## ‚úÖ Dica: Gerar x-cert em uma linha

Se seu certificado est√° em formato `.pem`, converta para **uma √∫nica linha**:

```bash
awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' certificado.pem
```

Ou em terminal Unix:
```bash
cat certificado.pem | tr -d '\n' | sed 's/$/\\n/g'
```

Use a sa√≠da como valor do `-Dx-cert`.

---

Se desejar, posso gerar:
- Um script de autentica√ß√£o OAuth2 para obter o token automaticamente
- Um gerador de certificado fake para testes locais
- Um `testng.xml` com par√¢metros para inje√ß√£o de headers

Deseja que eu prossiga com isso?

### USER
gere o codigo final dos testes para todos os endpoints

### ASSISTANT
Com base na an√°lise completa do conte√∫do do arquivo fornecido ‚Äî que descreve a **API Pix do BCB**, com foco nos **endpoints de configura√ß√£o de locations para recorr√™ncias (`/locrec`)** e outros relacionados a **webhooks, cobran√ßas recorrentes, consultas e opera√ß√µes com payloads** ‚Äî abaixo est√° a **implementa√ß√£o final completa dos testes automatizados**, organizada por contexto, com:

- Padr√£o de **Client** (como solicitado)
- DTOs com **Builder e Lombok**
- **DataFactory**
- **Validator** isolado
- Headers `x-cert` e `Authorization Bearer`
- TestNG
- Estrutura por **contexto de teste**

---

## ‚úÖ Estrutura Final dos Testes

### üìÅ Pacotes

```
src/test/java/
‚îú‚îÄ‚îÄ base/
‚îÇ   ‚îî‚îÄ‚îÄ BaseTeste.java
‚îú‚îÄ‚îÄ property/
‚îÇ   ‚îî‚îÄ‚îÄ PropertyManager.java
‚îú‚îÄ‚îÄ dto/
‚îÇ   ‚îú‚îÄ‚îÄ PayloadLocationRecSolicitadaDTO.java
‚îÇ   ‚îú‚îÄ‚îÄ PayloadLocationRecCompletaDTO.java
‚îÇ   ‚îî‚îÄ‚îÄ WebhookRecDTO.java
‚îú‚îÄ‚îÄ factory/
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecFactory.java
‚îú‚îÄ‚îÄ validator/
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecValidator.java
‚îú‚îÄ‚îÄ client/
‚îÇ   ‚îî‚îÄ‚îÄ PayloadLocationRecClient.java
‚îî‚îÄ‚îÄ test/
    ‚îú‚îÄ‚îÄ PostPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ GetPorPeriodoPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ GetPorIdPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ DeletePorIdPayloadLocationRecTest.java
    ‚îú‚îÄ‚îÄ PutWebhookRecTest.java
    ‚îú‚îÄ‚îÄ GetWebhookRecTest.java
    ‚îî‚îÄ‚îÄ GetIdRecPayloadLocationRecTest.java
```

---

### ‚úÖ 1. `BaseTeste.java`

```java
package base;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import org.testng.annotations.BeforeTest;
import property.PropertyManager;

import static io.restassured.RestAssured.*;

public abstract class BaseTeste {
    protected static RequestSpecification spec;
    protected static PropertyManager propertyManager = new PropertyManager();

    @BeforeTest(groups = {"PayloadLocationRec", "WebhookRec"})
    public void preCondicao() {
        String certHeader = propertyManager.getCertHeader();
        String bearerToken = propertyManager.getBearerToken();

        spec = new RequestSpecBuilder()
                .setBaseUri(propertyManager.getBaseUri())
                .setBasePath(propertyManager.getBasePath())
                .addHeader("x-cert", certHeader)
                .addHeader("Authorization", "Bearer " + bearerToken)
                .setContentType("application/json")
                .addFilter(new RequestLoggingFilter())
                .addFilter(new ResponseLoggingFilter())
                .build();

        enableLoggingOfRequestAndResponseIfValidationFails();
    }
}
```

---

### ‚úÖ 2. `PropertyManager.java`

```java
package property;

public class PropertyManager {
    public String getBaseUri() {
        return System.getProperty("base.uri", "https://pix.bcb.gov.br");
    }

    public String getBasePath() {
        return System.getProperty("base.path", "/api/v2");
    }

    public String getCertHeader() {
        String cert = System.getProperty("x-cert");
        if (cert == null || cert.isEmpty()) {
            throw new RuntimeException("Header x-cert n√£o fornecido. Use -Dx-cert='...' ao rodar.");
        }
        return cert;
    }

    public String getBearerToken() {
        String token = System.getProperty("bearer.token");
        if (token == null || token.isEmpty()) {
            throw new RuntimeException("Token OAuth2 n√£o fornecido. Use -Dbearer.token='...'");
        }
        return token;
    }
}
```

---

### ‚úÖ 3. DTOs

#### `PayloadLocationRecSolicitadaDTO.java`
```java
package dto;

import lombok.*;

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationRecSolicitadaDTO {
    private String tipo; // "rec"
}
```

#### `PayloadLocationRecCompletaDTO.java`
```java
package dto;

import lombok.*;

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationRecCompletaDTO {
    private String id;
    private String location;
    private String criacao;
    private String idRec;
}
```

#### `WebhookRecDTO.java`
```java
package dto;

import lombok.*;

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class WebhookRecDTO {
    private String webhookUrl;
}
```

---

### ‚úÖ 4. `PayloadLocationRecFactory.java`

```java
package factory;

import dto.*;
import java.util.HashMap;
import java.util.Map;

public class PayloadLocationRecFactory {

    public static PayloadLocationRecSolicitadaDTO payloadValida() {
        return PayloadLocationRecSolicitadaDTO.builder()
                .tipo("rec")
                .build();
    }

    public static PayloadLocationRecSolicitadaDTO payloadTipoInvalido() {
        return PayloadLocationRecSolicitadaDTO.builder()
                .tipo("invalido")
                .build();
    }

    public static Map<String, Object> queryParamsValidos() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", 0);
        params.put("itensPorPagina", 100);
        return params;
    }

    public static Map<String, Object> queryParamsFimAntesInicio() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2024-01-01T00:00:00Z");
        params.put("fim", "2023-01-01T00:00:00Z");
        return params;
    }

    public static Map<String, Object> queryParamsPaginacaoNegativa() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", -1);
        params.put("itensPorPagina", -10);
        return params;
    }

    public static WebhookRecDTO webhookValido() {
        return WebhookRecDTO.builder()
                .webhookUrl("https://meusite.com/webhook/pix-rec")
                .build();
    }

    public static WebhookRecDTO webhookUrlInvalido() {
        return WebhookRecDTO.builder()
                .webhookUrl("url-invalida")
                .build();
    }
}
```

---

### ‚úÖ 5. `PayloadLocationRecValidator.java`

```java
package validator;

import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;

public class PayloadLocationRecValidator {

    public void validaCriacao201(ValidatableResponse response) {
        response
                .statusCode(201)
                .header("Location", notNullValue())
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue())
                .body("tipo", equalTo("rec"));
    }

    public void validaConsulta200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("loc", hasSize(greaterThanOrEqualTo(0)))
                .body("parametros.inicio", notNullValue())
                .body("parametros.fim", notNullValue());
    }

    public void validaPorId200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("id", notNullValue())
                .body("location", notNullValue());
    }

    public void validaIdRec200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("idRec", notNullValue());
    }

    public void valida400(ValidatableResponse response) {
        response.statusCode(400);
    }

    public void valida403(ValidatableResponse response) {
        response.statusCode(403);
    }

    public void valida404(ValidatableResponse response) {
        response.statusCode(404);
    }

    public void valida200(ValidatableResponse response) {
        response.statusCode(200);
    }

    public void valida204(ValidatableResponse response) {
        response.statusCode(204);
    }
}
```

---

### ‚úÖ 6. `PayloadLocationRecClient.java`

```java
package client;

import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class PayloadLocationRecClient {

    private static final String BASE_PATH_LOC = "/locrec";
    private static final String WEBHOOK_PATH = "/webhookrec";

    public ValidatableResponse criaLocationRec(RequestSpecification spec, Object payload) {


### USER
voce deve gerar somente os scripts do controller Configura√ß√£o de locations para payloads

### ASSISTANT
Com base no conte√∫do fornecido do arquivo ‚Äî que descreve a **API Pix do BCB**, especificamente os endpoints relacionados √† **Configura√ß√£o de locations para payloads** (incluindo recorr√™ncias) ‚Äî e respeitando rigorosamente o seu pedido, abaixo est√£o **somente os scripts do controller (Client)** para os endpoints de **configura√ß√£o de locations para payloads**, organizados por contexto, conforme o padr√£o solicitado:

> ‚úÖ **Foco exclusivo**: apenas classes `Client` com m√©todos que encapsulam as requisi√ß√µes (sem testes, DTOs, validators ou factories).

---

### ‚úÖ 1. `PayloadLocationClient.java`  
*(Para opera√ß√µes com locations de cobran√ßas imediatas e com vencimento)*

```java
public class PayloadLocationClient {

    private static final String BASE_PATH_LOC = "/loc";

    /**
     * Cria uma nova location para cobran√ßa (cob ou cobv).
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o (com headers e autentica√ß√£o)
     * @param payload Corpo da requisi√ß√£o (tipoCob: "cob" ou "cobv")
     * @return Resposta valid√°vel
     */
    public ValidatableResponse criaLocation(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC)
                .then();
    }

    /**
     * Consulta locations cadastradas por per√≠odo e filtros.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param queryParams Mapa com: inicio, fim, txIdPresente, tipoCob, paginaAtual, itensPorPagina
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC)
                .then();
    }

    /**
     * Recupera uma location espec√≠fica pelo ID.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location (ex: "12345")
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC + "/{id}")
                .then();
    }

    /**
     * Desvincula uma cobran√ßa (txid) de uma location.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location
     * @return Resposta valid√°vel
     */
    public ValidatableResponse desvinculaCobrancaDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC + "/{id}/txid")
                .then();
    }
}
```

---

### ‚úÖ 2. `PayloadLocationRecClient.java`  
*(Para opera√ß√µes com locations de recorr√™ncias)*

```java
public class PayloadLocationRecClient {

    private static final String BASE_PATH_LOC_REC = "/locrec";

    /**
     * Cria uma nova location para recorr√™ncia.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param payload Corpo da requisi√ß√£o (deve conter "tipo": "rec")
     * @return Resposta valid√°vel
     */
    public ValidatableResponse criaLocationRec(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC_REC)
                .then();
    }

    /**
     * Consulta locations de recorr√™ncia por per√≠odo e filtros.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param queryParams Mapa com: inicio, fim, idRecPresente, convenio, paginaAtual, itensPorPagina
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaLocationsRec(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC_REC)
                .then();
    }

    /**
     * Recupera uma location de recorr√™ncia pelo ID.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaLocationRecPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC_REC + "/{id}")
                .then();
    }

    /**
     * Recupera o idRec associado a uma location de recorr√™ncia.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaIdRecDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC_REC + "/{id}/idRec")
                .then();
    }

    /**
     * Desvincula uma recorr√™ncia de uma location.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location
     * @return Resposta valid√°vel
     */
    public ValidatableResponse desvinculaRecDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC_REC + "/{id}/idRec")
                .then();
    }
}
```

---

### ‚úÖ 3. `WebhookRecClient.java`  
*(Configura√ß√£o de webhook para recorr√™ncias)*

```java
public class WebhookRecClient {

    private static final String BASE_PATH_WEBHOOK_REC = "/webhookrec";

    /**
     * Configura ou atualiza a URL do webhook para recorr√™ncias.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param payload Corpo com "webhookUrl"
     * @return Resposta valid√°vel
     */
    public ValidatableResponse configuraWebhookRec(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .put(BASE_PATH_WEBHOOK_REC)
                .then();
    }

    /**
     * Consulta a URL do webhook configurada para recorr√™ncias.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaWebhookRec(RequestSpecification spec) {
        return given().spec(spec)
                .when()
                .get(BASE_PATH_WEBHOOK_REC)
                .then();
    }

    /**
     * Remove a configura√ß√£o do webhook para recorr√™ncias.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @return Resposta valid√°vel
     */
    public ValidatableResponse removeWebhookRec(RequestSpecification spec) {
        return given().spec(spec)
                .when()
                .delete(BASE_PATH_WEBHOOK_REC)
                .then();
    }
}
```

---

### ‚úÖ 4. `WebhookClient.java`  
*(Configura√ß√£o de webhook para cobran√ßas imediatas/vencimento)*

```java
public class WebhookClient {

    private static final String BASE_PATH_WEBHOOK = "/webhook";

    /**
     * Configura ou atualiza a URL do webhook para cobran√ßas.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param payload Corpo com "webhookUrl"
     * @return Resposta valid√°vel
     */
    public ValidatableResponse configuraWebhook(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .put(BASE_PATH_WEBHOOK)
                .then();
    }

    /**
     * Consulta a URL do webhook configurada para cobran√ßas.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @return Resposta valid√°vel
     */
    public ValidatableResponse consultaWebhook(RequestSpecification spec) {
        return given().spec(spec)
                .when()
                .get(BASE_PATH_WEBHOOK)
                .then();
    }

    /**
     * Remove a configura√ß√£o do webhook para cobran√ßas.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @return Resposta valid√°vel
     */
    public ValidatableResponse removeWebhook(RequestSpecification spec) {
        return given().spec(spec)
                .when()
                .delete(BASE_PATH_WEBHOOK)
                .then();
    }
}
```

---

### üìå Resumo dos Controllers

| Controller | Endpoints | Finalidade |
|----------|----------|------------|
| `PayloadLocationClient` | `POST /loc`, `GET /loc`, `GET /loc/{id}`, `DELETE /loc/{id}/txid` | Locations para cobran√ßas (cob/cobv) |
| `PayloadLocationRecClient` | `POST /locrec`, `GET /locrec`, `GET /locrec/{id}`, `GET /locrec/{id}/idRec`, `DELETE /locrec/{id}/idRec` | Locations para recorr√™ncias |
| `WebhookRecClient` | `PUT /webhookrec`, `GET /webhookrec`, `DELETE /webhookrec` | Webhook para recorr√™ncias |
| `WebhookClient` | `PUT /webhook`, `GET /webhook`, `DELETE /webhook` | Webhook para cobran√ßas |

---

Estes s√£o **exclusivamente os controllers (clients)** para a **configura√ß√£o de locations para payloads**, conforme solicitado, alinhados ao padr√£o `SimulacaoClient` fornecido.

Se desejar, posso fornecer os **DTOs e factories** necess√°rios para uso com esses clients.

### USER
acho que voce ta se confundindo.o controller √© o da Payload location da cobranca e nao da rec

### ASSISTANT
Voc√™ est√° absolutamente correto, e agrade√ßo pela corre√ß√£o clara e direta.

Com base na an√°lise do conte√∫do do arquivo fornecido, o **controller correto** para o qual voc√™ solicitou os scripts de testes √© o de **`PayloadLocation`** (para cobran√ßas imediatas e com vencimento), **n√£o** o de `PayloadLocationRec` (que √© espec√≠fico para recorr√™ncias).

O foco √© nos endpoints de **configura√ß√£o de locations para payloads de cobran√ßas**, conforme descrito na tag:

```json
{"name": "PayloadLocation", "x-displayName": "Configura√ß√£o de locations para payloads", "description": "Re√∫ne endpoints destinados a lidar com configura√ß√£o e remo√ß√£o de locations para uso dos payloads"}
```

---

### ‚úÖ Objetivo Alinhado

Vou gerar **apenas os scripts do controller** (no padr√£o `SimulacaoClient`) para os endpoints de **`PayloadLocation`**, ou seja:

- `POST /loc` ‚Üí Criar location
- `GET /loc` ‚Üí Consultar locations por per√≠odo
- `GET /loc/{id}` ‚Üí Recuperar location por ID
- `DELETE /loc/{id}/txid` ‚Üí Desvincular cobran√ßa de uma location

Sem DTOs, sem testes, sem factories. **Apenas o controller (client)**.

---

### ‚úÖ `PayloadLocationClient.java` (Controller Final)

```java
public class PayloadLocationClient {

    private static final String BASE_PATH_LOC = "/loc";

    /**
     * Cria uma nova location para uma cobran√ßa (cob ou cobv).
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o (com headers, autentica√ß√£o, etc.)
     * @param payload Corpo da requisi√ß√£o com o tipo de cobran√ßa (ex: {"tipoCob": "cob"})
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse criaLocation(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC)
                .then();
    }

    /**
     * Consulta uma lista de locations cadastradas com base em filtros.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param queryParams Mapa com os par√¢metros: inicio, fim, txIdPresente, tipoCob, paginaAtual, itensPorPagina
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC)
                .then();
    }

    /**
     * Recupera uma location espec√≠fica pelo seu identificador.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location (ex: "7716")
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC + "/{id}")
                .then();
    }

    /**
     * Desvincula uma cobran√ßa (representada por um txid) de uma location.
     *
     * @param spec Especifica√ß√£o da requisi√ß√£o
     * @param id ID da location
     * @return Resposta valid√°vel da API
     */
    public ValidatableResponse desvinculaCobrancaDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC + "/{id}/txid")
                .then();
    }
}
```

---

### ‚úÖ Resumo dos Endpoints

| M√©todo | Endpoint | Finalidade | Permiss√£o OAuth2 |
|-------|---------|-----------|------------------|
| `POST` | `/loc` | Criar nova location | `payloadlocation.write` |
| `GET` | `/loc` | Consultar locations por per√≠odo | `payloadlocation.read` |
| `GET` | `/loc/{id}` | Recuperar location por ID | `payloadlocation.read` |
| `DELETE` | `/loc/{id}/txid` | Desvincular cobran√ßa da location | `payloadlocation.write` |

---

Este √© o **controller exclusivo e final** para a **configura√ß√£o de locations para payloads de cobran√ßa**, conforme especificado no documento e alinhado ao seu pedido.

Se desejar, posso agora gerar os **scripts de teste por contexto** (ex: `PostPayloadLocationTest`, `GetPorPeriodoPayloadLocationTest`, etc.) com base neste client. Deseja que eu prossiga?

### USER
fa√ßa o script completo de todos os endpoints dessa controller com base no padr√£o fornecido

### ASSISTANT
Com base no conte√∫do fornecido do arquivo (especifica√ß√£o da API Pix do BCB) e no padr√£o solicitado (`SimulacaoClient`), abaixo est√° o **script completo e final do controller `PayloadLocationClient`**, que encapsula **todos os endpoints da tag `PayloadLocation`** ‚Äî respons√°vel pela **configura√ß√£o de locations para payloads de cobran√ßas imediatas e com vencimento**.

O foco √© **exclusivamente no controller**, conforme solicitado, com:
- Padr√£o alinhado ao exemplo `SimulacaoClient`
- Uso de `RequestSpecification`
- Encapsulamento de todos os endpoints `/loc`
- Suporte a `queryParams` via `Map`
- Sem testes, DTOs ou valida√ß√µes ‚Äî apenas o client

---

### ‚úÖ `PayloadLocationClient.java` (Controller Completo)

```java
public class PayloadLocationClient {

    private static final String BASE_PATH_LOC = "/loc";

    /**
     * Cria uma nova location para uso em cobran√ßas (cob ou cobv).
     * <p>
     * Endpoint: POST /loc
     *
     * @param spec     RequestSpecification com headers (x-cert, Authorization, etc.)
     * @param payload  Corpo da requisi√ß√£o (ex: {"tipoCob": "cob"})
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse criaLocation(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC)
                .then();
    }

    /**
     * Consulta uma lista de locations cadastradas com base em filtros.
     * <p>
     * Endpoint: GET /loc
     * <p>
     * Par√¢metros suportados:
     * - inicio (obrigat√≥rio)
     * - fim (obrigat√≥rio)
     * - txIdPresente (opcional)
     * - tipoCob (opcional: "cob", "cobv")
     * - paginaAtual (opcional, default: 0)
     * - itensPorPagina (opcional, default: 100)
     *
     * @param spec          RequestSpecification com headers
     * @param queryParams   Mapa com os par√¢metros de consulta
     * @return              Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC)
                .then();
    }

    /**
     * Recupera uma location espec√≠fica pelo seu identificador.
     * <p>
     * Endpoint: GET /loc/{id}
     *
     * @param spec     RequestSpecification com headers
     * @param id       ID da location (ex: "7716")
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC + "/{id}")
                .then();
    }

    /**
     * Desvincula uma cobran√ßa (representada por um txid) de uma location.
     * Ap√≥s a execu√ß√£o, a location n√£o estar√° mais vinculada a uma cobran√ßa.
     * <p>
     * Endpoint: DELETE /loc/{id}/txid
     *
     * @param spec     RequestSpecification com headers
     * @param id       ID da location
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse desvinculaCobrancaDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC + "/{id}/txid")
                .then();
    }
}
```

---

### ‚úÖ Resumo dos Endpoints Implementados

| M√©todo | Endpoint | Finalidade | Escopo OAuth2 |
|-------|---------|-----------|----------------|
| `POST` | `/loc` | Criar nova location para cob/cobv | `payloadlocation.write` |
| `GET` | `/loc` | Listar locations por per√≠odo e filtros | `payloadlocation.read` |
| `GET` | `/loc/{id}` | Recuperar location por ID | `payloadlocation.read` |
| `DELETE` | `/loc/{id}/txid` | Desvincular cobran√ßa da location | `payloadlocation.write` |

---

### ‚úÖ Como Usar (Exemplo B√°sico)

```java
// Dentro de um teste
PayloadLocationClient client = new PayloadLocationClient();

// 1. Criar location
var payload = Map.of("tipoCob", "cob");
ValidatableResponse postResponse = client.criaLocation(spec, payload);

// 2. Consultar por per√≠odo
Map<String, Object> params = new HashMap<>();
params.put("inicio", "2023-01-01T00:00:00Z");
params.put("fim", "2024-12-31T23:59:59Z");
params.put("tipoCob", "cob");
params.put("paginaAtual", 0);
params.put("itensPorPagina", 100);

ValidatableResponse getResponse = client.consultaLocations(spec, params);

// 3. Recuperar por ID
ValidatableResponse getByIdResponse = client.consultaLocationPorId(spec, "7716");

// 4. Desvincular cobran√ßa
ValidatableResponse deleteResponse = client.desvinculaCobrancaDaLocation(spec, "7716");
```

---

Este √© o **controller completo e final** para a **Configura√ß√£o de locations para payloads**, conforme definido na especifica√ß√£o da API Pix do BCB e alinhado ao padr√£o fornecido.

Se desejar, posso gerar agora:
- Os testes por contexto (`PostPayloadLocationTest`, `GetPorPeriodoPayloadLocationTest`, etc.)
- O DTO `PayloadLocationSolicitadaDTO` com builder
- A classe `PayloadLocationFactory`

Deseja que eu prossiga com esses artefatos?

### USER
sim prossiga

### ASSISTANT
Com base no conte√∫do fornecido do arquivo (especifica√ß√£o da API Pix do BCB) e no padr√£o solicitado, abaixo est√° o **script completo e final do controller `PayloadLocationClient`**, que encapsula **todos os endpoints da tag `PayloadLocation`** ‚Äî respons√°vel pela **configura√ß√£o de locations para payloads de cobran√ßas imediatas e com vencimento**.

Este √© o **controller exclusivo e final**, conforme o padr√£o `SimulacaoClient` fornecido, com foco apenas na camada de requisi√ß√£o (sem testes, DTOs ou valida√ß√µes).

---

### ‚úÖ `PayloadLocationClient.java` (Controller Completo)

```java
public class PayloadLocationClient {

    private static final String BASE_PATH_LOC = "/loc";

    /**
     * Cria uma nova location para uso em cobran√ßas (cob ou cobv).
     * <p>
     * Endpoint: POST /loc
     * <p>
     * Exemplo de payload: {"tipoCob": "cob"} ou {"tipoCob": "cobv"}
     *
     * @param spec     RequestSpecification com headers (x-cert, Authorization, etc.)
     * @param payload  Corpo da requisi√ß√£o (objeto ou Map)
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse criaLocation(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC)
                .then();
    }

    /**
     * Consulta uma lista de locations cadastradas com base em filtros.
     * <p>
     * Endpoint: GET /loc
     * <p>
     * Par√¢metros suportados:
     * - inicio (obrigat√≥rio)
     * - fim (obrigat√≥rio)
     * - txIdPresente (opcional, boolean)
     * - tipoCob (opcional: "cob", "cobv")
     * - paginaAtual (opcional, default: 0)
     * - itensPorPagina (opcional, default: 100)
     *
     * @param spec           RequestSpecification com headers
     * @param queryParams    Mapa com os par√¢metros de consulta
     * @return               Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC)
                .then();
    }

    /**
     * Recupera uma location espec√≠fica pelo seu identificador.
     * <p>
     * Endpoint: GET /loc/{id}
     *
     * @param spec     RequestSpecification com headers
     * @param id       ID da location (ex: "7716")
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC + "/{id}")
                .then();
    }

    /**
     * Desvincula uma cobran√ßa (representada por um txid) de uma location.
     * Ap√≥s a execu√ß√£o, a location n√£o estar√° mais vinculada a uma cobran√ßa.
     * <p>
     * Endpoint: DELETE /loc/{id}/txid
     *
     * @param spec     RequestSpecification com headers
     * @param id       ID da location
     * @return         Resposta valid√°vel da API
     */
    public ValidatableResponse desvinculaCobrancaDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC + "/{id}/txid")
                .then();
    }
}
```

---

### ‚úÖ Resumo dos Endpoints

| M√©todo | Endpoint | Finalidade | Escopo OAuth2 |
|-------|---------|-----------|----------------|
| `POST` | `/loc` | Criar nova location para cob/cobv | `payloadlocation.write` |
| `GET` | `/loc` | Listar locations por per√≠odo e filtros | `payloadlocation.read` |
| `GET` | `/loc/{id}` | Recuperar location por ID | `payloadlocation.read` |
| `DELETE` | `/loc/{id}/txid` | Desvincular cobran√ßa da location | `payloadlocation.write` |

---

Este √© o **controller completo e final** para a **Configura√ß√£o de locations para payloads**, conforme definido na especifica√ß√£o da API Pix do BCB e alinhado ao padr√£o fornecido.

Se desejar, posso gerar agora:
- Os testes por contexto (`PostPayloadLocationTest`, `GetPorPeriodoPayloadLocationTest`, etc.)
- O DTO `PayloadLocationSolicitadaDTO` com builder
- A classe `PayloadLocationFactory`

Deseja que eu prossiga com esses artefatos?

### USER
sim

### ASSISTANT
Com base no conte√∫do fornecido do arquivo (especifica√ß√£o da API Pix do BCB, com foco na tag **`PayloadLocation`**) e no padr√£o solicitado (`SimulacaoClient`), abaixo est√° a **implementa√ß√£o completa e final dos scripts de testes automatizados para o controller `PayloadLocation`**, organizada por contexto, conforme o seu pedido.

Foram gerados:
- O **DTO** com `@Builder` e padr√£o Lombok
- A **DataFactory** para criar payloads
- O **Validator** com valida√ß√µes isoladas
- O **Client** (controller) com os m√©todos de requisi√ß√£o
- Os **testes por contexto**, com cen√°rios positivos e negativos

---

### ‚úÖ 1. DTO: `PayloadLocationSolicitadaDTO.java`

```java
package dto;

import lombok.*;

@Data
@Builder
@Jacksonized
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationSolicitadaDTO {
    private String tipoCob; // "cob" ou "cobv"
}
```

---

### ‚úÖ 2. Factory: `PayloadLocationFactory.java`

```java
package factory;

import dto.PayloadLocationSolicitadaDTO;
import java.util.HashMap;
import java.util.Map;

public class PayloadLocationFactory {

    public static PayloadLocationSolicitadaDTO payloadCobImediata() {
        return PayloadLocationSolicitadaDTO.builder()
                .tipoCob("cob")
                .build();
    }

    public static PayloadLocationSolicitadaDTO payloadCobVencimento() {
        return PayloadLocationSolicitadaDTO.builder()
                .tipoCob("cobv")
                .build();
    }

    public static PayloadLocationSolicitadaDTO payloadTipoInvalido() {
        return PayloadLocationSolicitadaDTO.builder()
                .tipoCob("invalido")
                .build();
    }

    public static Map<String, Object> queryParamsConsultaValidos() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", 0);
        params.put("itensPorPagina", 100);
        return params;
    }

    public static Map<String, Object> queryParamsFimAntesInicio() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2024-01-01T00:00:00Z");
        params.put("fim", "2023-01-01T00:00:00Z");
        return params;
    }

    public static Map<String, Object> queryParamsPaginacaoNegativa() {
        Map<String, Object> params = new HashMap<>();
        params.put("inicio", "2023-01-01T00:00:00Z");
        params.put("fim", "2024-12-31T23:59:59Z");
        params.put("paginaAtual", -1);
        params.put("itensPorPagina", -10);
        return params;
    }
}
```

---

### ‚úÖ 3. Validator: `PayloadLocationValidator.java`

```java
package validator;

import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;

public class PayloadLocationValidator {

    public void validaCriacao201(ValidatableResponse response) {
        response
                .statusCode(201)
                .header("Location", notNullValue())
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("tipoCob", in("cob", "cobv"));
    }

    public void validaConsulta200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("loc", hasSize(greaterThanOrEqualTo(0)))
                .body("parametros.inicio", notNullValue())
                .body("parametros.fim", notNullValue())
                .body("parametros.paginacao.paginaAtual", notNullValue())
                .body("parametros.paginacao.itensPorPagina", notNullValue());
    }

    public void validaPorId200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue());
    }

    public void validaDesvinculacao204(ValidatableResponse response) {
        response.statusCode(204);
    }

    public void valida400(ValidatableResponse response) {
        response
                .statusCode(400)
                .body("status", equalTo(400));
    }

    public void valida403(ValidatableResponse response) {
        response
                .statusCode(403)
                .body("status", equalTo(403));
    }

    public void valida404(ValidatableResponse response) {
        response
                .statusCode(404)
                .body("status", equalTo(404));
    }
}
```

---

### ‚úÖ 4. Client (Controller): `PayloadLocationClient.java`

```java
package client;

import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;

import java.util.Map;

import static io.restassured.RestAssured.given;

public class PayloadLocationClient {

    private static final String BASE_PATH_LOC = "/loc";

    public ValidatableResponse criaLocation(RequestSpecification spec, Object payload) {
        return given().spec(spec)
                .contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(BASE_PATH_LOC)
                .then();
    }

    public ValidatableResponse consultaLocations(RequestSpecification spec, Map<String, Object> queryParams) {
        return given().spec(spec)
                .queryParams(queryParams)
                .when()
                .get(BASE_PATH_LOC)
                .then();
    }

    public ValidatableResponse consultaLocationPorId(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .get(BASE_PATH_LOC + "/{id}")
                .then();
    }

    public ValidatableResponse desvinculaCobrancaDaLocation(RequestSpecification spec, String id) {
        return given().spec(spec)
                .pathParam("id", id)
                .when()
                .delete(BASE_PATH_LOC + "/{id}/txid")
                .then();
    }
}
```

---

### ‚úÖ 5. Testes por Contexto

#### üîπ `PostPayloadLocationTest.java`

```java
package test;

import client.PayloadLocationClient;
import dto.PayloadLocationSolicitadaDTO;
import factory.PayloadLocationFactory;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationValidator;
import base.BaseTeste;

import static org.hamcrest.Matchers.notNullValue;

@Test(groups = "PayloadLocation")
public class PostPayloadLocationTest extends BaseTeste {

    private PayloadLocationClient client;
    private PayloadLocationValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationClient();
        validator = new PayloadLocationValidator();
    }

    @Test(description = "CT-POST-01: Deve criar uma location para cobran√ßa imediata")
    public void deveCriarLocationParaCob() {
        PayloadLocationSolicitadaDTO payload = PayloadLocationFactory.payloadCobImediata();

        ValidatableResponse response = client.criaLocation(spec, payload);

        validator.validaCriacao201(response);
    }

    @Test(description = "CT-POST-02: Deve criar uma location para cobran√ßa com vencimento")
    public void deveCriarLocationParaCobV() {
        PayloadLocationSolicitadaDTO payload = PayloadLocationFactory.payloadCobVencimento();

        ValidatableResponse response = client.criaLocation(spec, payload);

        validator.validaCriacao201(response);
    }

    @Test(description = "CT-POST-03: N√£o deve criar location com tipoCob inv√°lido")
    public void naoDeveCriarComTipoInvalido() {
        PayloadLocationSolicitadaDTO payload = PayloadLocationFactory.payloadTipoInvalido();

        ValidatableResponse response = client.criaLocation(spec, payload);

        validator.valida400(response);
    }
}
```

---

#### üîπ `GetPorPeriodoPayloadLocationTest.java`

```java
package test;

import client.PayloadLocationClient;
import factory.PayloadLocationFactory;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationValidator;
import base.BaseTeste;

@Test(groups = "PayloadLocation")
public class GetPorPeriodoPayloadLocationTest extends BaseTeste {

    private PayloadLocationClient client;
    private PayloadLocationValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationClient();
        validator = new PayloadLocationValidator();
    }

    @Test(description = "CT-GET-PERIODO-01: Deve consultar locations com par√¢metros v√°lidos")
    public void deveConsultarComParametrosValidos() {
        var queryParams = PayloadLocationFactory.queryParamsConsultaValidos();

        ValidatableResponse response = client.consultaLocations(spec, queryParams);

        validator.validaConsulta200(response);
    }

    @Test(description = "CT-GET-PERIODO-02: N√£o deve consultar com fim < in√≠cio")
    public void naoDeveConsultarComFimAntesInicio() {
        var queryParams = PayloadLocationFactory.queryParamsFimAntesInicio();

        ValidatableResponse response = client.consultaLocations(spec, queryParams);

        validator.valida400(response);
    }

    @Test(description = "CT-GET-PERIODO-03: N√£o deve consultar com pagina√ß√£o negativa")
    public void naoDeveConsultarComPaginacaoNegativa() {
        var queryParams = PayloadLocationFactory.queryParamsPaginacaoNegativa();

        ValidatableResponse response = client.consultaLocations(spec, queryParams);

        validator.valida400(response);
    }
}
```

---

#### üîπ `GetPorIdPayloadLocationTest.java`

```java
package test;

import client.PayloadLocationClient;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationValidator;
import base.BaseTeste;

@Test(groups = "PayloadLocation")
public class GetPorIdPayloadLocationTest extends BaseTeste {

    private PayloadLocationClient client;
    private PayloadLocationValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationClient();
        validator = new PayloadLocationValidator();
    }

    @Test(description = "CT-GET-ID-01: Deve recuperar location por ID v√°lido")
    public void deveRecuperarPorIdValido() {
        String id = "7716"; // Exemplo de ID v√°lido

        ValidatableResponse response = client.consultaLocationPorId(spec, id);

        validator.validaPorId200(response);
    }

    @Test(description = "CT-GET-ID-02: Deve retornar 404 para ID inexistente")
    public void deveRetornar404ParaIdInexistente() {
        String id = "999999";

        ValidatableResponse response = client.consultaLocationPorId(spec, id);

        validator.valida404(response);
    }
}
```

---

#### üîπ `DeletePorIdPayloadLocationTest.java`

```java
package test;

import client.PayloadLocationClient;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationValidator;
import base.BaseTeste;

@Test(groups = "PayloadLocation")
public class DeletePorIdPayloadLocationTest extends BaseTeste {

    private PayloadLocationClient client;
    private PayloadLocationValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationClient();
        validator = new PayloadLocationValidator();
    }

    @Test(description = "CT-DELETE-01: Deve desvincular cobran√ßa de uma location")
    public void deveDesvincularCobranca() {
        String id = "7716";

        ValidatableResponse response = client.desvinculaCobrancaDaLocation(spec, id);

        validator.validaDesvinculacao204(response);
    }

    @Test(description = "CT-DELETE-02: Deve retornar 404 ao desvincular location inexistente")
    public void deveRetornar404AoDesvincularInexistente() {
        String id = "999999";

        ValidatableResponse response = client.desvinculaCobrancaDaLocation(spec, id);

        validator.valida404(response);
    }
}
```

---

### ‚úÖ Resumo dos Testes

| Classe de Teste | Endpoint | Cen√°rios |
|------------------|---------|----------|
| `PostPayloadLocationTest` | `POST /loc` | Criar com `cob`, `cobv`, falhar com tipo inv√°lido |
| `GetPorPeriodoPayloadLocationTest` | `GET /loc` | Consultar com filtros v√°lidos, datas inv√°lidas, pagina√ß√£o negativa |
| `GetPorIdPayloadLocationTest` | `GET /loc/{id}` | Recuperar por ID v√°lido, ID inexistente |
| `DeletePorIdPayloadLocationTest` | `DELETE /loc/{id}/txid` | Desvincular com sucesso, falhar com ID inexistente |

---

### ‚úÖ Execu√ß√£o

Execute com Maven e inje√ß√£o de headers:

```bash
mvn test \
  -Dbase.uri="https://pix.bcb.gov.br" \
  -Dbase.path="/api/v2" \
  -Dx-cert="MIIGbTCCBFWgAwIBAgIIK8..." \
  -Dbearer.token="eyJhbGciOiJSUzI1NiIs..."
```

---

Este √© o **conjunto completo e final** de testes automatizados para o **controller `PayloadLocation`**, com isolamento de responsabilidades, reutiliza√ß√£o, e alinhamento total ao padr√£o `SimulacaoClient` fornecido.

Se desejar, posso gerar os **schemas JSON** para valida√ß√£o ou um **`testng.xml`** para execu√ß√£o por grupo. Deseja?

### USER
inclua a valida√ß√£o de schema

### ASSISTANT
Com base no conte√∫do fornecido do arquivo (especifica√ß√£o da API Pix do BCB) e no padr√£o solicitado, abaixo est√° a **implementa√ß√£o completa e final dos scripts de testes automatizados para o controller `PayloadLocation`**, agora com a **valida√ß√£o de schema** integrada √† classe `PayloadLocationValidator`, conforme o seu pedido.

A valida√ß√£o de schema utiliza o suporte nativo do **RestAssured com JSON Schema**, carregando os arquivos de schema do classpath.

---

### ‚úÖ 1. Estrutura de Pastas para Schemas

Crie os arquivos de schema no caminho:
```
src/test/resources/schemas/payloadlocation/
‚îú‚îÄ‚îÄ PayloadLocation_Criacao.json
‚îú‚îÄ‚îÄ PayloadLocation_Consulta.json
‚îî‚îÄ‚îÄ PayloadLocation_PorId.json
```

---

### ‚úÖ 2. Arquivos de Schema JSON

#### `schemas/payloadlocation/PayloadLocation_Criacao.json`

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["id", "location", "tipoCob", "criacao"],
  "properties": {
    "id": { "type": "string" },
    "location": { "type": "string", "format": "uri" },
    "tipoCob": { "type": "string", "enum": ["cob", "cobv"] },
    "criacao": { "type": "string", "format": "date-time" }
  }
}
```

#### `schemas/payloadlocation/PayloadLocation_Consulta.json`

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["loc", "parametros"],
  "properties": {
    "loc": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "location", "tipoCob", "criacao"],
        "properties": {
          "id": { "type": "string" },
          "location": { "type": "string", "format": "uri" },
          "tipoCob": { "type": "string", "enum": ["cob", "cobv"] },
          "criacao": { "type": "string", "format": "date-time" }
        }
      }
    },
    "parametros": {
      "type": "object",
      "required": ["inicio", "fim"],
      "properties": {
        "inicio": { "type": "string", "format": "date-time" },
        "fim": { "type": "string", "format": "date-time" },
        "paginacao": {
          "type": "object",
          "properties": {
            "paginaAtual": { "type": "integer" },
            "itensPorPagina": { "type": "integer" }
          }
        }
      }
    }
  }
}
```

#### `schemas/payloadlocation/PayloadLocation_PorId.json`

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["id", "location", "tipoCob", "criacao"],
  "properties": {
    "id": { "type": "string" },
    "location": { "type": "string", "format": "uri" },
    "tipoCob": { "type": "string", "enum": ["cob", "cobv"] },
    "criacao": { "type": "string", "format": "date-time" }
  }
}
```

---

### ‚úÖ 3. Atualiza√ß√£o do `PayloadLocationValidator.java` (com Schema Validation)

```java
package validator;

import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;

public class PayloadLocationValidator {

    // Caminhos para os schemas
    private static final String SCHEMA_CRIACAO = "schemas/payloadlocation/PayloadLocation_Criacao.json";
    private static final String SCHEMA_CONSULTA = "schemas/payloadlocation/PayloadLocation_Consulta.json";
    private static final String SCHEMA_POR_ID = "schemas/payloadlocation/PayloadLocation_PorId.json";

    public void validaCriacao201(ValidatableResponse response) {
        response
                .statusCode(201)
                .header("Location", notNullValue())
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("tipoCob", in("cob", "cobv"))
                .body(matchesJsonSchemaInClasspath(SCHEMA_CRIACAO));
    }

    public void validaConsulta200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("loc", hasSize(greaterThanOrEqualTo(0)))
                .body("parametros.inicio", notNullValue())
                .body("parametros.fim", notNullValue())
                .body(matchesJsonSchemaInClasspath(SCHEMA_CONSULTA));
    }

    public void validaPorId200(ValidatableResponse response) {
        response
                .statusCode(200)
                .body("id", notNullValue())
                .body("location", notNullValue())
                .body("criacao", notNullValue())
                .body(matchesJsonSchemaInClasspath(SCHEMA_POR_ID));
    }

    public void validaDesvinculacao204(ValidatableResponse response) {
        response.statusCode(204);
    }

    public void valida400(ValidatableResponse response) {
        response
                .statusCode(400)
                .body("status", equalTo(400))
                .body("type", containsString("PayloadLocationOperacaoInvalida"));
    }

    public void valida403(ValidatableResponse response) {
        response
                .statusCode(403)
                .body("status", equalTo(403));
    }

    public void valida404(ValidatableResponse response) {
        response
                .statusCode(404)
                .body("status", equalTo(404));
    }
}
```

---

### ‚úÖ 4. Exemplo de Teste com Valida√ß√£o de Schema (n√£o precisa alterar)

Os testes permanecem **inalterados**, pois a valida√ß√£o de schema est√° encapsulada no `validator`.

#### Exemplo em `PostPayloadLocationTest.java`

```java
@Test(description = "CT-POST-01: Deve criar uma location para cobran√ßa imediata")
public void deveCriarLocationParaCob() {
    PayloadLocationSolicitadaDTO payload = PayloadLocationFactory.payloadCobImediata();

    ValidatableResponse response = client.criaLocation(spec, payload);

    validator.validaCriacao201(response); // <-- Schema √© validado aqui
}
```

---

### ‚úÖ 5. Depend√™ncia Maven para JSON Schema (verifique se est√° presente)

```xml
<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>json-schema-validator</artifactId>
    <version>5.4.0</version>
    <scope>test</scope>
</dependency>
```

---

### ‚úÖ 6. (Opcional) Valida√ß√£o de Erros com Schema

Para erros (400), voc√™ pode validar o schema do problema:

#### `schemas/error/Problema.json`

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["type", "title", "status"],
  "properties": {
    "type": { "type": "string", "format": "uri" },
    "title": { "type": "string" },
    "status": { "type": "integer" },
    "detail": { "type": "string" },
    "violacoes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "razao": { "type": "string" },
          "propriedade": { "type": "string" }
        }
      }
    }
  }
}
```

#### E no validator:

```java
private static final String SCHEMA_PROBLEMA = "schemas/error/Problema.json";

public void valida400(ValidatableResponse response) {
    response
            .statusCode(400)
            .body("status", equalTo(400))
            .body(matchesJsonSchemaInClasspath(SCHEMA_PROBLEMA));
}
```

---

### ‚úÖ Resumo das Altera√ß√µes

| Componente | Altera√ß√£o |
|----------|---------|
| `/schemas` | Arquivos JSON Schema adicionados para cria√ß√£o, consulta e erro |
| `PayloadLocationValidator` | Inclui `matchesJsonSchemaInClasspath()` nos m√©todos de valida√ß√£o |
| Testes | **Sem altera√ß√£o** ‚Äî valida√ß√£o √© transparente |
| Maven | Confirme a depend√™ncia `json-schema-validator` |

---

Esta √© a **vers√£o final completa** dos testes para o controller `PayloadLocation`, com **valida√ß√£o de schema** integrada, conforme o padr√£o da API Pix do BCB e o seu pedido.

Se desejar, posso gerar os **relat√≥rios Allure** ou um **pipeline GitHub Actions** para execu√ß√£o automatizada. Deseja?

### USER
a estrategia que quero adotar √© usar a api client que retorna os dados do get pra validar o conteudo dos responses dos gets. a ideia √© : pra buscar uma massa aleatoria eu vou usar o getpor periodo do client que vai retornar exatamente pra pegar uma massa aleatoria nele antes de chamar meu get por id pensando em deixar a busca de massa mais dinamica. e da lista pra valida tbm o retorno da consulta por periodo. Como voce me sugere montar esse script ?

### ASSISTANT
Perfeito! Sua estrat√©gia √© **excelente** e alinha-se com boas pr√°ticas de testes automatizados: **reutilizar a pr√≥pria API para buscar massa de dados din√¢mica**, garantindo que os testes sejam **robustos, independentes de dados fixos e sempre v√°lidos**.

Vamos montar esse script com base no **controller `PayloadLocationClient`**, conforme o padr√£o fornecido, e aplicar a l√≥gica:

---

### ‚úÖ Objetivo da Estrat√©gia

1. Usar `GET /loc` (consulta por per√≠odo) para buscar **uma lista de locations ativas**
2. Selecionar **aleatoriamente um `id` v√°lido** dessa lista
3. Usar esse `id` para chamar `GET /loc/{id}` e validar o retorno
4. Validar que o item retornado por `GET /loc/{id}` est√° **consistente com a lista de `GET /loc`**

---

### ‚úÖ Estrutura do Script

Vamos criar uma classe `GetPorIdPayloadLocationTest` que:
- Usa o `PayloadLocationClient` para fazer as requisi√ß√µes
- Extrai um `id` aleat√≥rio da resposta de `consultaLocations`
- Valida que o `GET /loc/{id}` retorna dados consistentes com a lista

---

### ‚úÖ 1. DTO de Resposta da Lista: `PayloadLocationConsultadasDTO.java`

```java
package dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;

import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class PayloadLocationConsultadasDTO {
    private List<PayloadLocationItemDTO> loc;
    private Parametros parametros;
}

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
class PayloadLocationItemDTO {
    private String id;
    private String location;
    private String tipoCob;
    private String criacao;
}

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
class Parametros {
    private String inicio;
    private String fim;
    private Paginacao paginacao;
}

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
class Paginacao {
    private Integer paginaAtual;
    private Integer itensPorPagina;
}
```

---

### ‚úÖ 2. Atualiza√ß√£o do `PayloadLocationClient` (para retornar Response)

Precisamos de um m√©todo que retorne a **resposta bruta** para extrair dados. Vamos adicionar um overload:

```java
// Em PayloadLocationClient.java

/**
 * Consulta locations e retorna a resposta bruta para extra√ß√£o de dados.
 */
public Response consultaLocationsResponse(RequestSpecification spec, Map<String, Object> queryParams) {
    return given().spec(spec)
            .queryParams(queryParams)
            .when()
            .get(BASE_PATH_LOC);
}
```

> ‚úÖ Importe: `import io.restassured.response.Response;`

---

### ‚úÖ 3. Teste: `GetPorIdPayloadLocationTest.java` (com estrat√©gia din√¢mica)

```java
package test;

import client.PayloadLocationClient;
import dto.PayloadLocationConsultadasDTO;
import dto.PayloadLocationItemDTO;
import factory.PayloadLocationFactory;
import io.restassured.response.Response;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import validator.PayloadLocationValidator;
import base.BaseTeste;

import java.util.List;
import java.util.Random;

import static org.testng.Assert.*;

@Test(groups = "PayloadLocation")
public class GetPorIdPayloadLocationTest extends BaseTeste {

    private PayloadLocationClient client;
    private PayloadLocationValidator validator;

    @BeforeClass
    public void setup() {
        client = new PayloadLocationClient();
        validator = new PayloadLocationValidator();
    }

    @Test(description = "CT-GET-ID-01: Deve recuperar location por ID obtido dinamicamente da lista")
    public void deveRecuperarLocationPorIdDinamico() {
        // Passo 1: Consultar lista de locations
        Map<String, Object> queryParams = PayloadLocationFactory.queryParamsConsultaValidos();
        Response listaResponse = client.consultaLocationsResponse(spec, queryParams);

        // Valida status e extrai dados
        listaResponse.then().statusCode(200);
        PayloadLocationConsultadasDTO lista = listaResponse.as(PayloadLocationConsultadasDTO.class);

        // Valida que h√° pelo menos uma location
        assertNotNull(lista.getLoc(), "Lista de locations √© nula");
        assertTrue(lista.getLoc().size() > 0, "Nenhuma location encontrada para teste");

        // Passo 2: Selecionar um ID aleat√≥rio
        List<PayloadLocationItemDTO> locations = lista.getLoc();
        PayloadLocationItemDTO itemAleatorio = locations.get(new Random().nextInt(locations.size()));
        String idSelecionado = itemAleatorio.getId();

        System.out.println("ID selecionado aleatoriamente: " + idSelecionado);

        // Passo 3: Chamar GET /loc/{id}
        ValidatableResponse getByIdResponse = client.consultaLocationPorId(spec, idSelecionado);

        // Valida√ß√µes
        validator.validaPorId200(getByIdResponse);

        // Extra√ß√£o do item retornado
        Response individualResponse = client.consultaLocationsResponse(spec, Map.of("txid", "")) // dummy
                .then().spec(getByIdResponse.extract().spec()).extract().response();
        PayloadLocationItemDTO locationIndividual = individualResponse.as(PayloadLocationItemDTO.class);

        // Passo 4: Validar consist√™ncia entre lista e detalhe
        assertEquals(locationIndividual.getId(), itemAleatorio.getId(), "ID deve ser igual");
        assertEquals(locationIndividual.getLocation(), itemAleatorio.getLocation(), "Location deve ser igual");
        assertEquals(locationIndividual.getTipoCob(), itemAleatorio.getTipoCob(), "tipoCob deve ser igual");
        assertTrue(
                locationIndividual.getCriacao().startsWith(itemAleatorio.getCriacao().substring(0, 10)),
                "Data de cria√ß√£o deve ser compat√≠vel"
        );
    }

    @Test(description = "CT-GET-ID-02: Deve validar schema e integridade da consulta por per√≠odo")
    public void deveValidarIntegridadeDaConsultaPorPeriodo() {
        Map<String, Object> queryParams = PayloadLocationFactory.queryParamsConsultaValidos();
        Response response = client.consultaLocationsResponse(spec, queryParams);

        // Valida status e schema
        response.then().statusCode(200);
        response.then().body(matchesJsonSchemaInClasspath("schemas/payloadlocation/PayloadLocation_Consulta.json"));

        // Extrai e valida conte√∫do
        PayloadLocationConsultadasDTO lista = response.as(PayloadLocationConsultadasDTO.class);
        assertNotNull(lista.getLoc(), "Campo 'loc' n√£o deve ser nulo");
        assertNotNull(lista.getParametros(), "Campo 'parametros' n√£o deve ser nulo");
        assertNotNull(lista.getParametros().getInicio(), "Par√¢metro 'inicio' deve estar presente");
        assertNotNull(lista.getParametros().getFim(), "Par√¢metro 'fim' deve estar presente");

        // Valida que todos os itens t√™m campos obrigat√≥rios
        for (PayloadLocationItemDTO item : lista.getLoc()) {
            assertNotNull(item.getId(), "ID n√£o pode ser nulo na lista");
            assertNotNull(item.getLocation(), "Location n√£o pode ser nula");
            assertTrue(item.getTipoCob().equals("cob") || item.getTipoCob().equals("cobv"),
                    "tipoCob deve ser 'cob' ou 'cobv'");
        }
    }
}
```

---

### ‚úÖ 4. Melhorias no `PayloadLocationValidator` (opcional)

Adicione um m√©todo para validar apenas o schema:

```java
public void validaSchemaConsulta(ValidatableResponse response) {
    response.body(matchesJsonSchemaInClasspath("schemas/payloadlocation/PayloadLocation_Consulta.json"));
}
```

E use no teste:
```java
validator.validaSchemaConsulta(listaResponse.then());
```

---

### ‚úÖ 5. Dica: Filtro por Status (opcional)

Se quiser garantir que s√≥ pega locations **ativas**, filtre por `txIdPresente=true`:

```java
params.put("txIdPresente", true);
```

Isso garante que a location est√° vinculada a uma cobran√ßa ativa.

---

### ‚úÖ Resumo da Estrat√©gia

| Passo | A√ß√£o |
|------|------|
| 1 | `GET /loc` com per√≠odo v√°lido ‚Üí retorna lista de locations |
| 2 | Extrai `id` aleat√≥rio de um item da lista |
| 3 | `GET /loc/{id}` com o ID selecionado |
| 4 | Valida: status, schema, e **consist√™ncia de dados** entre lista e detalhe |

---

### ‚úÖ Benef√≠cios

- ‚úÖ Elimina depend√™ncia de IDs fixos
- ‚úÖ Teste sempre com dados reais e v√°lidos
- ‚úÖ Valida integridade da API (lista ‚Üî detalhe)
- ‚úÖ Mais robusto para CI/CD e ambientes din√¢micos

---

Se quiser, posso gerar uma **utilidade gen√©rica** (`DataPickerUtils.java`) para extrair aleatoriamente itens de qualquer lista retornada pela API, reutiliz√°vel em outros testes.

Deseja que eu prossiga com isso?

### USER
vou usar sem essa sua sugestao sua

### ASSISTANT
Entendido! Se no futuro precisar de apoio, estou √† disposi√ß√£o. Boa sorte com a sua estrat√©gia de testes! üöÄ

### USER
quero que voce escreva os casos de teste no padr√£o no nome abaixo:

[api-pix] Metodo  + path api + resultado esperado que √© o nome do metodo de teste.
Ex: [api-pix] POST /loc - deveCriarLocationParaCob

Alem dessa informa√ß√£o o caso de teste deve ter objetivo e pre condicao

pra que eu possa cadastra no zephyr scale

### ASSISTANT
Com base na an√°lise do conte√∫do fornecido (especifica√ß√£o da API Pix do BCB, com foco no **controller de configura√ß√£o de locations para payloads**) e no padr√£o solicitado, abaixo est√£o os **casos de teste** formatados para cadastro no **Zephyr Scale**, com:

- **Nome do teste** no padr√£o: `[api-pix] M√©todo /path - resultadoEsperado`
- **Objetivo**
- **Pr√©-condi√ß√£o**

Esses casos cobrem os endpoints do controller `PayloadLocation` (`/loc`), conforme a tag `PayloadLocation` descrita no arquivo.

---

### ‚úÖ Casos de Teste: Controller `PayloadLocation`

---

#### 1. `[api-pix] POST /loc - deveCriarLocationParaCob`

- **Objetivo**:  
  Validar que √© poss√≠vel criar uma location para uma cobran√ßa imediata (cob) com sucesso, retornando status 201, headers e corpo com os dados da location gerada.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT.

---

#### 2. `[api-pix] POST /loc - deveCriarLocationParaCobV`

- **Objetivo**:  
  Validar que √© poss√≠vel criar uma location para uma cobran√ßa com vencimento (cobv) com sucesso, retornando status 201 e os dados da location no corpo da resposta.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT.

---

#### 3. `[api-pix] POST /loc - naoDeveCriarLocationComTipoCobInvalido`

- **Objetivo**:  
  Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` possui um valor inv√°lido (ex: "invalido"), retornando status 400 e erro `PayloadLocationOperacaoInvalida`.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`.

---

#### 4. `[api-pix] POST /loc - naoDeveCriarLocationSemTipoCob`

- **Objetivo**:  
  Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` est√° ausente no payload, retornando status 400 e erro de viola√ß√£o de schema.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`.

---

#### 5. `[api-pix] GET /loc - deveConsultarLocationsComPeriodoValido`

- **Objetivo**:  
  Validar que √© poss√≠vel consultar uma lista de locations cadastradas em um intervalo de tempo v√°lido, retornando status 200 e uma lista paginada de locations.

- **Pr√©-condi√ß√£o**:  
  Existem locations cadastradas no per√≠odo informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 6. `[api-pix] GET /loc - naoDeveConsultarComFimAntesDoInicio`

- **Objetivo**:  
  Validar que a API rejeita a consulta quando o par√¢metro `fim` √© anterior ao `inicio`, retornando status 400 e erro `PayloadLocationConsultaInvalida`.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 7. `[api-pix] GET /loc - naoDeveConsultarComPaginacaoNegativa`

- **Objetivo**:  
  Validar que a API rejeita a consulta quando `paginaAtual` ou `itensPorPagina` s√£o negativos, retornando status 400 e erro de valida√ß√£o.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 8. `[api-pix] GET /loc - naoDeveConsultarComParametrosInvalidos`

- **Objetivo**:  
  Validar que a API rejeita a consulta com par√¢metros fora do formato esperado (ex: data inv√°lida), retornando status 400.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 9. `[api-pix] GET /loc/{id} - deveRecuperarLocationPorIdExistente`

- **Objetivo**:  
  Validar que √© poss√≠vel recuperar uma location espec√≠fica por seu ID, retornando status 200 e os dados completos da location.

- **Pr√©-condi√ß√£o**:  
  Existe uma location cadastrada com o ID informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 10. `[api-pix] GET /loc/{id} - naoDeveRecuperarLocationPorIdInexistente`

- **Objetivo**:  
  Validar que a API retorna 404 quando o ID da location n√£o existe, com erro `PayloadLocationNaoEncontrado`.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 11. `[api-pix] GET /loc/{id} - naoDeveRecuperarLocationComIdInvalido`

- **Objetivo**:  
  Validar que a API rejeita a consulta com um ID mal formatado (ex: caracteres especiais), retornando status 400.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`.

---

#### 12. `[api-pix] DELETE /loc/{id}/txid - deveDesvincularCobrancaDaLocation`

- **Objetivo**:  
  Validar que √© poss√≠vel desvincular uma cobran√ßa (txid) de uma location, retornando status 204 (No Content).

- **Pr√©-condi√ß√£o**:  
  A location existe e est√° vinculada a uma cobran√ßa. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`.

---

#### 13. `[api-pix] DELETE /loc/{id}/txid - naoDeveDesvincularComIdInexistente`

- **Objetivo**:  
  Validar que a API retorna 404 ao tentar desvincular uma cobran√ßa de uma location inexistente.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`.

---

#### 14. `[api-pix] DELETE /loc/{id}/txid - naoDeveDesvincularComIdInvalido`

- **Objetivo**:  
  Validar que a API rejeita a desvincula√ß√£o com um ID mal formatado, retornando status 400.

- **Pr√©-condi√ß√£o**:  
  O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`.

---

#### 15. `[api-pix] POST /loc - naoDeveCriarLocationSemAutenticacao`

- **Objetivo**:  
  Validar que a API rejeita a cria√ß√£o de uma location sem o header `Authorization`, retornando status 403 (`AcessoNegado`).

- **Pr√©-condi√ß√£o**:  
  Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2.

---

#### 16. `[api-pix] GET /loc - naoDeveConsultarSemAutenticacao`

- **Objetivo**:  
  Validar que a API rejeita a consulta de locations sem o header `Authorization`, retornando status 403.

- **Pr√©-condi√ß√£o**:  
  Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2.

---

### ‚úÖ Pr√≥ximos Passos

Voc√™ pode copiar esses casos diretamente para o **Zephyr Scale** no formato:

| Test Case Name | Objective | Precondition |
|----------------|-----------|-------------|
| `[api-pix] POST /loc - deveCriarLocationParaCob` | Validar que √© poss√≠vel criar... | O usu√°rio possui credenciais... |

Se desejar, posso gerar um **CSV** ou **JSON** para importa√ß√£o em massa no Zephyr Scale.

Deseja que eu gere o arquivo de importa√ß√£o?

### USER
antes de gerar o csv ajuste nos nomes pra que antes do /loc tenha /api/v1

### ASSISTANT
Perfeito! Com base no conte√∫do do arquivo fornecido e na sua solicita√ß√£o, ajustei todos os **nomes dos casos de teste** para incluir o prefixo `/api/v1` antes do `/loc`, alinhando-se √† estrutura completa do endpoint conforme esperado em ambientes reais (ex: `https://pix.example.com/api/v1/loc`).

Abaixo est√£o os **casos de teste atualizados** no padr√£o solicitado para cadastro no **Zephyr Scale**, com:

- **Nome do teste**: `[api-pix] M√©todo /api/v1/path - resultadoEsperado`
- **Objetivo**
- **Pr√©-condi√ß√£o**

---

### ‚úÖ Casos de Teste: Controller `PayloadLocation` (com `/api/v1`)

| Test Case Name | Objective | Precondition |
|----------------|---------|-------------|
| `[api-pix] POST /api/v1/loc - deveCriarLocationParaCob` | Validar que √© poss√≠vel criar uma location para uma cobran√ßa imediata (cob) com sucesso, retornando status 201, headers e corpo com os dados da location gerada. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT. |
| `[api-pix] POST /api/v1/loc - deveCriarLocationParaCobV` | Validar que √© poss√≠vel criar uma location para uma cobran√ßa com vencimento (cobv) com sucesso, retornando status 201 e os dados da location no corpo da resposta. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT. |
| `[api-pix] POST /api/v1/loc - naoDeveCriarLocationComTipoCobInvalido` | Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` possui um valor inv√°lido (ex: "invalido"), retornando status 400 e erro `PayloadLocationOperacaoInvalida`. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`. |
| `[api-pix] POST /api/v1/loc - naoDeveCriarLocationSemTipoCob` | Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` est√° ausente no payload, retornando status 400 e erro de viola√ß√£o de schema. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`. |
| `[api-pix] GET /api/v1/loc - deveConsultarLocationsComPeriodoValido` | Validar que √© poss√≠vel consultar uma lista de locations cadastradas em um intervalo de tempo v√°lido, retornando status 200 e uma lista paginada de locations. | Existem locations cadastradas no per√≠odo informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc - naoDeveConsultarComFimAntesDoInicio` | Validar que a API rejeita a consulta quando o par√¢metro `fim` √© anterior ao `inicio`, retornando status 400 e erro `PayloadLocationConsultaInvalida`. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc - naoDeveConsultarComPaginacaoNegativa` | Validar que a API rejeita a consulta quando `paginaAtual` ou `itensPorPagina` s√£o negativos, retornando status 400 e erro de valida√ß√£o. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc - naoDeveConsultarComParametrosInvalidos` | Validar que a API rejeita a consulta com par√¢metros fora do formato esperado (ex: data inv√°lida), retornando status 400. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc/{id} - deveRecuperarLocationPorIdExistente` | Validar que √© poss√≠vel recuperar uma location espec√≠fica por seu ID, retornando status 200 e os dados completos da location. | Existe uma location cadastrada com o ID informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc/{id} - naoDeveRecuperarLocationPorIdInexistente` | Validar que a API retorna 404 quando o ID da location n√£o existe, com erro `PayloadLocationNaoEncontrado`. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] GET /api/v1/loc/{id} - naoDeveRecuperarLocationComIdInvalido` | Validar que a API rejeita a consulta com um ID mal formatado (ex: caracteres especiais), retornando status 400. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`. |
| `[api-pix] DELETE /api/v1/loc/{id}/txid - deveDesvincularCobrancaDaLocation` | Validar que √© poss√≠vel desvincular uma cobran√ßa (txid) de uma location, retornando status 204 (No Content). | A location existe e est√° vinculada a uma cobran√ßa. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`. |
| `[api-pix] DELETE /api/v1/loc/{id}/txid - naoDeveDesvincularComIdInexistente` | Validar que a API retorna 404 ao tentar desvincular uma cobran√ßa de uma location inexistente. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`. |
| `[api-pix] DELETE /api/v1/loc/{id}/txid - naoDeveDesvincularComIdInvalido` | Validar que a API rejeita a desvincula√ß√£o com um ID mal formatado, retornando status 400. | O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`. |
| `[api-pix] POST /api/v1/loc - naoDeveCriarLocationSemAutenticacao` | Validar que a API rejeita a cria√ß√£o de uma location sem o header `Authorization`, retornando status 403 (`AcessoNegado`). | Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2. |
| `[api-pix] GET /api/v1/loc - naoDeveConsultarSemAutenticacao` | Validar que a API rejeita a consulta de locations sem o header `Authorization`, retornando status 403. | Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2. |

---

### ‚úÖ Pr√≥ximo Passo: CSV para Importa√ß√£o no Zephyr Scale

Agora vou gerar o arquivo **CSV** com esses dados para voc√™ importar diretamente no Zephyr Scale (via Jira).

Segue o conte√∫do do CSV:

```csv
"Test Case Name","Objective","Precondition"
"[api-pix] POST /api/v1/loc - deveCriarLocationParaCob","Validar que √© poss√≠vel criar uma location para uma cobran√ßa imediata (cob) com sucesso, retornando status 201, headers e corpo com os dados da location gerada.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT."
"[api-pix] POST /api/v1/loc - deveCriarLocationParaCobV","Validar que √© poss√≠vel criar uma location para uma cobran√ßa com vencimento (cobv) com sucesso, retornando status 201 e os dados da location no corpo da resposta.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write` e um certificado digital (x-cert) registrado no DICT."
"[api-pix] POST /api/v1/loc - naoDeveCriarLocationComTipoCobInvalido","Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` possui um valor inv√°lido (ex: ""invalido""), retornando status 400 e erro `PayloadLocationOperacaoInvalida`.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`."
"[api-pix] POST /api/v1/loc - naoDeveCriarLocationSemTipoCob","Validar que a API rejeita a cria√ß√£o de uma location quando o campo `tipoCob` est√° ausente no payload, retornando status 400 e erro de viola√ß√£o de schema.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`."
"[api-pix] GET /api/v1/loc - deveConsultarLocationsComPeriodoValido","Validar que √© poss√≠vel consultar uma lista de locations cadastradas em um intervalo de tempo v√°lido, retornando status 200 e uma lista paginada de locations.","Existem locations cadastradas no per√≠odo informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc - naoDeveConsultarComFimAntesDoInicio","Validar que a API rejeita a consulta quando o par√¢metro `fim` √© anterior ao `inicio`, retornando status 400 e erro `PayloadLocationConsultaInvalida`.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc - naoDeveConsultarComPaginacaoNegativa","Validar que a API rejeita a consulta quando `paginaAtual` ou `itensPorPagina` s√£o negativos, retornando status 400 e erro de valida√ß√£o.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc - naoDeveConsultarComParametrosInvalidos","Validar que a API rejeita a consulta com par√¢metros fora do formato esperado (ex: data inv√°lida), retornando status 400.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc/{id} - deveRecuperarLocationPorIdExistente","Validar que √© poss√≠vel recuperar uma location espec√≠fica por seu ID, retornando status 200 e os dados completos da location.","Existe uma location cadastrada com o ID informado. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc/{id} - naoDeveRecuperarLocationPorIdInexistente","Validar que a API retorna 404 quando o ID da location n√£o existe, com erro `PayloadLocationNaoEncontrado`.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] GET /api/v1/loc/{id} - naoDeveRecuperarLocationComIdInvalido","Validar que a API rejeita a consulta com um ID mal formatado (ex: caracteres especiais), retornando status 400.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.read`."
"[api-pix] DELETE /api/v1/loc/{id}/txid - deveDesvincularCobrancaDaLocation","Validar que √© poss√≠vel desvincular uma cobran√ßa (txid) de uma location, retornando status 204 (No Content).","A location existe e est√° vinculada a uma cobran√ßa. O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`."
"[api-pix] DELETE /api/v1/loc/{id}/txid - naoDeveDesvincularComIdInexistente","Validar que a API retorna 404 ao tentar desvincular uma cobran√ßa de uma location inexistente.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`."
"[api-pix] DELETE /api/v1/loc/{id}/txid - naoDeveDesvincularComIdInvalido","Validar que a API rejeita a desvincula√ß√£o com um ID mal formatado, retornando status 400.","O usu√°rio possui credenciais OAuth2 v√°lidas com escopo `payloadlocation.write`."
"[api-pix] POST /api/v1/loc - naoDeveCriarLocationSemAutenticacao","Validar que a API rejeita a cria√ß√£o de uma location sem o header `Authorization`, retornando status 403 (`AcessoNegado`).","Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2."
"[api-pix] GET /api/v1/loc - naoDeveConsultarSemAutenticacao","Validar que a API rejeita a consulta de locations sem o header `Authorization`, retornando status 403.","Nenhuma (teste de seguran√ßa). A requisi√ß√£o √© feita sem token OAuth2."
```

---

### ‚úÖ Como Usar

1. Copie o conte√∫do acima.
2. Cole em um arquivo chamado `casos_de_teste_payload_location.csv`.
3. No **Zephyr Scale**, v√° para **Test Management > Tests > Import Tests**.
4. Escolha o formato **CSV** e mapeie os campos:
   - `Test Case Name` ‚Üí Name
   - `Objective` ‚Üí Objective
   - `Precondition` ‚Üí Precondition
5. Importe e associe ao projeto desejado.

---

Se desejar, posso gerar tamb√©m:
- Os mesmos